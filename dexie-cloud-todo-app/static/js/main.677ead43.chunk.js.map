{"version":3,"sources":["models/populate.ts","models/db.ts","components/TodoItemView.tsx","components/AddTodoItem.tsx","components/TodoListView.tsx","components/TodoLists.tsx","components/AddTodoList.tsx","components/ResetDatabaseButton.tsx","components/NavBar.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["a","db","addons","dexieCloud","todoLists","todoItems","version","stores","cloud","configure","databaseUrl","process","tryUseServiceWorker","requireAuth","Dexie","delete","window","location","reload","on","TodoItemView","item","className","done","type","checked","onChange","ev","update","target","title","onClick","id","icon","faTrashAlt","AddTodoItem","todoList","useState","todoListId","setItem","disabled","placeholder","value","onKeyUp","key","add","TodoListView","items","useLiveQuery","where","toArray","map","TodoLists","lists","list","AddTodoList","isActive","setIsActive","setTitle","autoFocus","faList","ResetDatabaseButton","resetDatabase","faDatabase","NavBar","currentUser","useObservable","Navbar","bg","variant","Brand","Toggle","Collapse","isLoggedIn","Text","name","Button","login","grant_type","userId","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.677ead43.chunk.js","sourcesContent":["//import { db } from \"./db\";\n\nexport async function populate() {\n  /*const todoListId = await db.todoLists.add({\n    title: \"To Do Today\"\n  });\n  await db.todoItems.bulkAdd([\n    {\n      todoListId,\n      title: \"Feed the birds\"\n    },\n    {\n      todoListId,\n      title: \"Watch a movie\"\n    },\n    {\n      todoListId,\n      title: \"Have some sleep\"\n    }\n  ]);*/\n}\n","import Dexie, { Table } from 'dexie';\nimport dexieCloud, { DexieCloudTable } from 'dexie-cloud-addon';\nimport { populate } from './populate';\nimport { TodoItem } from './TodoItem';\nimport { TodoList } from './TodoList';\n\nexport class TodoDB extends Dexie {\n  todoLists!: DexieCloudTable<TodoList>;\n  todoItems!: DexieCloudTable<TodoItem>;\n\n  constructor() {\n    super('TodoDBCloud', { addons: [dexieCloud] });\n    this.version(1).stores({\n      todoLists: '@id',\n      todoItems: '@id, todoListId'\n    });\n    // Connect to cloud\n    this.cloud.configure({\n      databaseUrl: process.env.REACT_APP_DBURL!,\n      tryUseServiceWorker: true,\n      requireAuth: false\n    });\n  }\n}\n\nexport const db = new TodoDB();\n\ndb.on('populate', populate);\n\nexport async function resetDatabase() {\n  await db.delete();\n  window.location.reload();\n  /*return db.transaction('rw', db.todoLists, db.todoItems, async () => {\n    await db.todoItems\n      .filter((tdi) => !tdi.realmId || tdi.realmId === db.cloud.currentUserId)\n      .delete();\n    await db.todoLists\n      .filter((tdl) => !tdl.realmId || tdl.realmId === db.cloud.currentUserId)\n      .delete();\n    await populate();\n  });*/\n}\n","import React from \"react\";\nimport { db } from \"../models/db\";\nimport { TodoItem } from \"../models/TodoItem\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Props {\n  item: TodoItem;\n}\n\nexport function TodoItemView({ item }: Props) {\n  return (\n    <div className={\"row \" + (item.done ? \"done\" : \"\")}>\n      <div className=\"narrow\">\n        <input\n          type=\"checkbox\"\n          checked={!!item.done}\n          onChange={ev =>\n            db.todoItems.update(item, {\n              done: ev.target.checked\n            })\n          }\n        />\n      </div>\n      <div className=\"todo-item-text\">{item.title}</div>\n      <div className=\"todo-item-trash\">\n        <a onClick={() => db.todoItems.delete(item.id!)} title=\"Delete item\">\n          <FontAwesomeIcon icon={faTrashAlt} />\n        </a>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { db } from \"../models/db\";\nimport { TodoItem } from \"../models/TodoItem\";\nimport { TodoList } from \"../models/TodoList\";\n\ninterface Props {\n  todoList: TodoList;\n}\n\nexport function AddTodoItem({ todoList }: Props) {\n  const [item, setItem] = useState({\n    todoListId: todoList.id,\n    title: \"\"\n  } as TodoItem);\n\n  return (\n    <div className=\"row add-item\">\n      <div className=\"narrow\">\n        <input type=\"checkbox\" disabled />\n      </div>\n      <div className=\"todo-item-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Add something...\"\n          value={item.title}\n          onChange={ev =>\n            setItem(item => ({\n              ...item,\n              title: ev.target.value\n            }))\n          }\n          onKeyUp={ev => {\n            if (ev.key === \"Enter\") {\n              db.todoItems.add(item);\n              setItem({\n                todoListId: todoList.id,\n                title: \"\"\n              } as TodoItem);\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { TodoList } from \"../models/TodoList\";\nimport { db } from \"../models/db\";\nimport { TodoItemView } from \"./TodoItemView\";\nimport { AddTodoItem } from \"./AddTodoItem\";\n\ninterface Props {\n  todoList: TodoList;\n}\n\nexport function TodoListView({ todoList }: Props) {\n  const items = useLiveQuery(\n    () => db.todoItems.where({ todoListId: todoList.id }).toArray(),\n    [todoList.id]\n  );\n\n  if (!items) return null;\n\n  return (\n    <div className=\"box\">\n      <h2>{todoList.title}</h2>\n      <div>\n        {items.map(item => (\n          <TodoItemView key={item.id} item={item} />\n        ))}\n      </div>\n      <div>\n        <AddTodoItem todoList={todoList} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { db } from \"../models/db\";\nimport { TodoListView } from \"./TodoListView\";\n\nexport function TodoLists() {\n  const lists = useLiveQuery(() => db.todoLists.toArray());\n\n  if (!lists) return null;\n\n  return (\n    <div>\n      {lists.map(list => (\n        <TodoListView key={list.id} todoList={list} />\n      ))}\n    </div>\n  );\n}\n","import { faList } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useState } from \"react\";\nimport { db } from \"../models/db\";\n\nexport function AddTodoList() {\n  const [isActive, setIsActive] = useState(false);\n  const [title, setTitle] = useState(\"\");\n\n  return !isActive ? (\n    <button className=\"large-button\" onClick={() => setIsActive(!isActive)}>\n      <FontAwesomeIcon icon={faList} /> Add another list\n    </button>\n  ) : (\n    <div className=\"box\">\n      <h2>Give your list a name:</h2>\n      <div className=\"todo-item-input\">\n        <input\n          type=\"text\"\n          autoFocus\n          placeholder=\"Name of list...\"\n          value={title}\n          onChange={ev => setTitle(ev.target.value)}\n          onKeyUp={ev => {\n            if (ev.key === \"Enter\") {\n              db.todoLists.add({ title });\n              setTitle(\"\");\n              setIsActive(false);\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { faDatabase } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { resetDatabase } from \"../models/db\";\n\nexport function ResetDatabaseButton() {\n  return (\n    <button\n      className=\"large-button\"\n      onClick={() => {\n        resetDatabase();\n      }}\n    >\n      <FontAwesomeIcon icon={faDatabase} /> Reset Database\n    </button>\n  );\n}\n","import React from 'react';\nimport {\n  Navbar,\n  Nav,\n  NavDropdown,\n  Form,\n  FormControl,\n  Button\n} from 'react-bootstrap';\nimport { useObservable } from 'react-use';\nimport { db } from '../models/db';\n\nexport function NavBar() {\n  const currentUser = useObservable(db.cloud.currentUser);\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand>Dexie Cloud ToDo App</Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n        {currentUser?.isLoggedIn ? (\n          <Navbar.Text>\n            Signed in as: <a>{currentUser.name}</a>\n          </Navbar.Text>\n        ) : (\n          <Button\n            onClick={() =>\n              db.cloud.login({ grant_type: 'demo', userId: 'foo@demo.local' })\n            }\n          >\n            Login\n          </Button>\n        )}\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import React from 'react';\nimport { TodoLists } from './components/TodoLists';\nimport { AddTodoList } from './components/AddTodoList';\nimport { ResetDatabaseButton } from './components/ResetDatabaseButton';\nimport { NavBar } from './components/NavBar';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <TodoLists />\n      <AddTodoList />\n      <ResetDatabaseButton />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}